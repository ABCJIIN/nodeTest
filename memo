/* prettier - 코드 예쁘게 정리 해주는 것
eslint

props (부모 -> 자식 )
state (해당 컴포넌트 안에서)
1. 클래스형(setState)
2. 함수형(userState) -> hooks */

Dom을 직접적으로 건드려야 할 때
(state로 해결할 수 없는 문제들)
1.특정 Input에 포커스를 주기 위해
2.스크롤 박스 조작을 위해
3.canvas 요소에 그림 그리기 등..

ref사용 방법
1.콜백 함수
2.createRef(v16.3이후)

-

ref 컴포넌트에 달수있다.
-> 내부에 있는 돔을 외부에서 사용할 때

class ref
함수형 컴포넌트 useRef

-

컴포넌트가 업데이트 될 떄
1.prop가 바뀔때
2.state가 바뀔때
3.부모 컴포넌트가 리렌더링 될 때
4.this.forceUpdate로 강제로 렌더링

useEffet
1.렌더링 될 때 마다 실행
2.처음 렌더링 될때만 실행하고 싶을 경우엔 2번째 매개변수에 빈배열을 넣어줌
3.특정한 값이 바뀔때만 실행
componentDidUpdate(preProps.prevState) {
    if(prevProps.value !==this.props.value) {
        ...
    }
}
4.뒷정리(cleanup): 언마운트 되기 전이나 업데이트 되기 직전에 어떤 작업을 수행하고 싶을 떄
언마운트 될때만 하고 싶으면 빈배열을 넣어줌

userReducer: 더 다양한 컴포넌트를 상황에 따라 다양한 상태를 다른 값으로 업데이트 하고 싶을 때 사용

기본 데이터가 있으면 액션(디스패치) 발생시 리듀서에 의해 변경

가장 큰 장점: 컴포넌트 로직을  컴포넌트와 분리 시킬 수 있음

useMemo: 렌더링 하는 과정에서 특정 값이 바뀔때만 연산을 실행